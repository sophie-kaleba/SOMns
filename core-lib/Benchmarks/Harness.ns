(* Copyright (c) 2001-2015 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*)
class Harness usingPlatform: platform = Value (
(*  The Harness can be invoked on the command line and should be passed a list
    of benchmarks to run (class names) as arguments. It will run each of them
    and output single as well as a total. *)
| private system = platform system.
  private platform = platform.
  private ObjectMirror = platform mirrors ObjectMirror.
|
)(

  public class Benchmark = ()(
    public innerBenchmarkLoop: innerIterations numThreads: threads = (
      1 to: innerIterations do: [:i |
        (self verifyResult: self benchmark) ifFalse: [ ^ false ].
      ].
      ^ true
    )

    benchmark  = ( self subclassResponsibility )
    verifyResult: result = ( self subclassResponsibility )

    assert: expected equals: value = (
      expected = value ifFalse: [
        self error: 'Expected value (' + expected asString +
                    ') differs from actual (' + value asString +
                    ') benchmark result.'
      ].
      ^ true
    )
  )

  public class Random new: seed = (
    | seed ::= seed. |
  ) (
    public next = (
      seed:: ((seed * 1309) + 13849) & 65535.
      ^ seed
    )
  ) : (
    public new = ( ^ self new: 74755 )
  )

  public class JenkinsRandom new: seed = (
    | private seed ::= seed. |
  ) (
    (* Robert Jenkins 32 bit integer hash function. *)
    public next = (
      (* Original version, with complete set of conversions. *)

         seed:: ((seed       + 2127912214)       + (seed as32BitUnsignedValue  << 12) as32BitSignedValue) as32BitSignedValue.
         seed:: ((seed bitXor: 3345072700) bitXor: (seed as32BitUnsignedValue >>> 19)) as32BitSignedValue.
         seed:: ((seed       +  374761393)       + (seed as32BitUnsignedValue  <<  5) as32BitSignedValue) as32BitSignedValue.
         seed:: ((seed       + 3550635116) bitXor: (seed as32BitUnsignedValue  <<  9) as32BitSignedValue) as32BitSignedValue.
         seed:: ((seed       + 4251993797)       + (seed as32BitUnsignedValue  <<  3) as32BitSignedValue) as32BitSignedValue.
         seed:: ((seed bitXor: 3042594569) bitXor: (seed as32BitUnsignedValue >>> 16)) as32BitSignedValue.

      (*   Optimized version, without semantically unnecessary conversions.


      seed:: ((seed       + 2127912214)       + (seed  << 12)) as32BitSignedValue. (* 0x7ed55d16 *)
      seed:: ((seed bitXor: 3345072700) bitXor: (seed >>> 19)).                    (* 0xc761c23c *)
      seed:: ((seed       +  374761393)       + (seed  <<  5)).                    (* 0x165667B1 *)
      seed:: ((seed       + 3550635116) bitXor: (seed  <<  9)).                    (* 0xd3a2646c *)
      seed:: ((seed       + 4251993797)       + (seed  <<  3)) as32BitSignedValue. (* 0xfd7046c5 *)
      seed:: ((seed bitXor: 3042594569) bitXor: (seed >>> 16)) as32BitSignedValue. (* 0xb55a4f09 *)
      *)
      ^ seed
    )
  )

  public class Run = (
    | public total           ::= 0.
      public numIterations   ::= 1.
      public warmUp          ::= 0.
      public innerIterations ::= 1.
      public numThreads      ::= 1.
      public maxRuntime      ::= 0.
      public printAll        ::= true.
      public benchmarkSuite  ::= nil.
      public name            ::= nil.
    |
  )(

    public runBenchmark = (
      | result |
      ('Starting ' + name + ' benchmark ...\n') println.

      self doRuns: benchmarkSuite newInstance.
      self reportBenchmark.

      '' println
    )

    private measure: bench = (
      | startTime endTime |
      startTime:: system ticks.
      (bench innerBenchmarkLoop: innerIterations numThreads: numThreads) ifFalse: [
        self error: 'Benchmark failed with incorrect result'. ].
      endTime:: system ticks.

      ^ endTime - startTime.
    )

    doRuns: bench = (
      1 to: numIterations do: [:i |
        | runTime |
        runTime:: measure: bench.

        printAll ifTrue: [ self print: bench run: runTime ].

        i > warmUp ifTrue: [
          total:: total + runTime ].

        maxRuntime > 0 ifTrue: [
          total > maxRuntime ifTrue: [
            numIterations:: i.
            ^ self ]].
        
        system experimentalGC: 1.
        ].
    )

    reportBenchmark = (
      (name + ': iterations=' + numIterations +
       ' average: ' + (total / (numIterations - warmUp)) + 'us total: ' + total +
       'us\n') println.
    )

    print: bench run: runTime = (
      (*(name + ': iterations=1' + ' runtime: ' + runTime + 'us')*)runTime println
    )

    public printTotal = (
      ('Total Runtime: ' + total asString + 'us') println.
    )
  )

  processArguments: args for: run = (
    (* First argument is the BenchmarkHarness *)
    run name: (args at: 2).
    run benchmarkSuite: (self loadBenchmarkSuite: (args at: 2)).
    args size > 2 ifTrue: [
      run numIterations: (args at: 3) asInteger.
      args size > 3 ifTrue: [
        run warmUp: (args at: 4) asInteger.
        args size > 4 ifTrue: [
          run innerIterations: (args at: 5) asInteger.
          args size > 5 ifTrue: [
            run numThreads: (args at: 6) asInteger
    ] ] ] ]
  )

  public main: args = (
    | run |
    args size < 2 ifTrue: [ self printUsage. ^ 1 ].

    run:: Run new.
    self processArguments: args for: run.

    run runBenchmark.
    run printTotal.
    ^ 0
  )

  printUsage = (
    './som core-lib/Benchmarks/Harness.ns [benchmark] [num-iterations [warm-up [inner-iter [num-threads]]]' println.
    '' println.
    '  benchmark      - benchmark file name or class name (supports nested classes with ".") ' println.
    '                   file name examples: core-lib/Benchmark/Queens.ns' println.
    '                   class name examples: Queens, Fibonacci, Sort.QuickSort, LanguageFeatures.Dispatch' println.
    '  num-iterations - number of times to execute benchmark, default: 1' println.
    '  warm-up        - number of samples to discard as warmup, default: 0' println.
    '  inner-iter     - number of times the benchmark is executed in an inner loop, ' println.
    '                   which is measured in total, default: 1' println.
    '  num-threads    - number of threads that run the benchmark' println.
  )

  loadFile: fileName = (
    | cls = system loadModule: fileName. |
    cls ifNil: [
        self error: 'Failed loading benchmark: ' + fileName ].
    ^ cls usingPlatform: platform andHarness: self.
  )

  loadModule: className = (
    | file cls |
    file:: className + '.ns'.
    cls:: system loadModule: file nextTo: self.
    cls ifNil: [
        self error: 'Failed loading benchmark: ' + className ].
    ^ cls usingPlatform: platform andHarness: self.
  )

  loadBenchmarkSuite: className = (
    | file module nested |
    (className endsWith: '.ns')
      ifTrue: [ ^ self loadFile: className ].
    (className includes: '.')
      ifFalse: [ ^ self loadModule: className ].

    nested:: className split: '.'.
    module:: self loadModule: (nested at: 1).
    ^ (ObjectMirror reflecting: module) perform: (nested at: 2) asSymbol
  )
)
